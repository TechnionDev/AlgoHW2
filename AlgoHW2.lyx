#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{xcolor}
\pagecolor[rgb]{0.15,0.15,0.15} %black
\color[rgb]{1,1,1} %grey

\newfontfamily\mylistingsfont{Space Mono}
\definecolor{lbcolor}{rgb}{0.3,0.3,0.3}
\end_preamble
\use_default_options true
\begin_modules
linguistics
theorems-bytype
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 1cm
\topmargin 1cm
\rightmargin 1cm
\bottommargin 1.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip smallskip
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\listings_params "basicstyle={\mylistingsfont},language={C++},backgroundcolor={\color{lbcolor}},showstringspaces=false"
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Algo HW 2
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="1">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0pt">
<row topspace="2cm">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size huge
Dani Bondar - 206560856
\end_layout

\end_inset
</cell>
</row>
<row topspace="1cm">
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\size huge
Gur Telem - 206631848
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Exercise
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Section Aleph
\end_layout

\begin_layout Standard
Connected components: 
\begin_inset Formula $V=\left\{ \left\{ 8,9,10\right\} ,\left\{ 3,4\right\} ,\left\{ 1\right\} ,\left\{ 2\right\} ,\left\{ 5,6\right\} ,\left\{ 7\right\} \right\} $
\end_inset


\end_layout

\begin_layout Standard
Components graph: The graph is:
\end_layout

\begin_layout Standard
\begin_inset Formula $E=\left\{ \left(\left\{ 1\right\} ,\left\{ 2\right\} \right),\left(\left\{ 1\right\} ,\left\{ 5,6\right\} \right),\left(\left\{ 2\right\} ,\left\{ 3,4\right\} \right),\left(\left\{ 2\right\} ,\left\{ 7\right\} \right),\left(\left\{ 3,4\right\} ,\left\{ 7\right\} \right),\left(\left\{ 5,6\right\} ,\left\{ 8,9,10\right\} \right),\left(\left\{ 7\right\} ,\left\{ 8,9,10\right\} \right)\right\} $
\end_inset


\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename AlgoHW2Q1Graph.jpeg
	scale 15

\end_inset


\end_layout

\begin_layout Subsection*
Section Bet
\end_layout

\begin_layout Standard
\begin_inset Flex Structure Tree
status open

\begin_layout Plain Layout
[2[3][4][1[5]]]
\end_layout

\end_inset


\end_layout

\begin_layout Exercise
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
True
\end_layout

\begin_layout Enumerate
False
\end_layout

\begin_layout Enumerate
False
\end_layout

\begin_layout Enumerate
True
\end_layout

\begin_layout Enumerate
False
\end_layout

\begin_layout Enumerate
False
\end_layout

\begin_layout Enumerate
False
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Exercise
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subparagraph
Algorithm: 
\end_layout

\begin_layout Enumerate
Run the 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

SCC
\end_layout

\end_inset

 algorithm from the lecture.
\end_layout

\begin_layout Enumerate
Starting from the smallest SCC, check for each vertex 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 in the component if there is an edge in 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

e
\end_layout

\end_inset

 from 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 to a 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

v'
\end_layout

\end_inset

 in another component.
 if there isn't return the component as 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

U
\end_layout

\end_inset

 and exit.
\end_layout

\begin_layout Enumerate
Return 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

NULL
\end_layout

\end_inset

.
\end_layout

\begin_layout Subparagraph
Correctness: 
\end_layout

\begin_layout Lemma
If there is close group U in graph G, then it's one of the strongly connected
 components.
\end_layout

\begin_deeper
\begin_layout Proof
Lets consider in contradicting that U is not one of the SCC.
 meaning it has a mix of vertices form different SCC or it lacks a number
 of vertices from his own SCC or there is multiple SCC's in U.
\end_layout

\begin_layout Proof
In the first case, let 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 be the vertex form the SCC which is't present at his fullest.
 because 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 is part of the SCC there's an edge form 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 to some other vertex in his SCC which isn't part of U - in contradiction
 to U.
\end_layout

\begin_layout Proof
In the second case, let 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

 be one of the vertices in SCC.
 by the definition of this case, there is at list one vertex form 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

's SCC which isn't part of U - lets say 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

w
\end_layout

\end_inset

.
 there is a path from 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

v
\end_layout

\end_inset

to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

w
\end_layout

\end_inset

 (because they are part of the same SCC), let 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

u
\end_layout

\end_inset

 be the last vertex in this path that is part of U.
 meaning there is an edge from 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

u
\end_layout

\end_inset

 to some other vertex outside of U - in contradiction to U.
\end_layout

\begin_layout Proof
In the last case, let 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 be the first SCC and 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 be the second SCC.
 we know that the SCC's are not well connected meaning there isn't a path
 from 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

 to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 and from 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

B
\end_layout

\end_inset

 to 
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

A
\end_layout

\end_inset

.
 meaning there is at list one edge that crosses the two SCC's - especially
 there isn't any two edge's form A to B and from B to A (because if there
 were, A and B would have been one SCC).
 and because both A and B are smaller then U - there is a contradiction
 to the minimality of U.
 
\end_layout

\end_deeper
\begin_layout Standard
\begin_inset Separator plain
\end_inset


\end_layout

\begin_layout Standard
Using Lemma 1.
 we know that one of the SCC is the smallest Closed Group.
\end_layout

\begin_layout Standard
By iterating over the SCC's from the smallest one to the largest, we are
 guaranteeing that we will receive the smallest Closed Group.
 
\end_layout

\begin_layout Subparagraph
Complexity:
\end_layout

\begin_layout Standard
Executing the SCC algorithm is 
\begin_inset Formula $O\left(\left|V+E\right|\right)$
\end_inset

.
 For each SCC we will check each of the vertices in the SCC if one of it
 edges is crossing the SCC.
\end_layout

\begin_layout Standard
meaning, we will iterate on the graph G checking each vertex and each edge
 only once - time complexity of 
\begin_inset Formula $O\left(\left|E+V\right|\right)$
\end_inset

.
\end_layout

\begin_layout Standard
In conclusion, the time complexity is 
\begin_inset Formula $O\left(\left|E+V\right|\right)$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Exercise
\begin_inset listings
inline true
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Exercise
\begin_inset FormulaMacro
\newcommand{\tree}{}
{\left(T\backslash\left\{ e\right\} \right)\cup\left\{ e'\right\} }
\end_inset


\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $G=\left(V,E\right)$
\end_inset

 undirected graph, connected with weights on the edges.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $T,T'$
\end_inset

 different minimal spanning trees of 
\begin_inset Formula $G$
\end_inset

.
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $e\in T\backslash T'$
\end_inset

.
\end_layout

\begin_layout Standard
RTP: 
\begin_inset Formula $\exists e'\in T'\backslash T$
\end_inset

 s.t.
 
\begin_inset Formula $\tree$
\end_inset

 is a minimal spanning tree of 
\begin_inset Formula $G$
\end_inset

 with weights.
\end_layout

\begin_layout Proof
We will refer to 
\begin_inset Formula $T$
\end_inset

 as the blue tree and 
\begin_inset Formula $T'$
\end_inset

 as the red tree (this red/blue names are completely unrelated to the algorithms
 we learned in class).
\end_layout

\begin_layout Proof
After removing the blue edge 
\begin_inset Formula $e$
\end_inset

 from 
\begin_inset Formula $T$
\end_inset

.
 We get a forest of two trees.
 Let's look at the cut separating the two connected components.
 The blue edge 
\begin_inset Formula $e$
\end_inset

 crosses the cut ofc because this is the edge that used to connect the subtrees.
\end_layout

\begin_layout Proof
Now let's look at 
\begin_inset Formula $T'\cup\left\{ e\right\} $
\end_inset

, this is ofc a graph with a cycle because it has an extra edge (because
 of combinators).
\end_layout

\begin_layout Proof
The edge 
\begin_inset Formula $e$
\end_inset

 is part of the cycle (also combi).
 Thus, there must be another red edge that crosses the cut (at least one).
\end_layout

\begin_layout Proof
BWOC: Let's assume all the red edges that crosses the cut have higher weight
 than the weight of 
\begin_inset Formula $e$
\end_inset

.
\end_layout

\begin_layout Proof
Thus, we can remove one of those red edges, let's mark it 
\begin_inset Formula $l$
\end_inset

, and get a connected graph 
\begin_inset Formula $\left(T\backslash\left\{ e\right\} \right)\cup\left\{ l\right\} $
\end_inset

 with 
\begin_inset Formula $\left|V\right|-1$
\end_inset

 edges (it must be connected because of combi again: if it weren't, then
 there is only a single simple path between the nodes of 
\begin_inset Formula $l$
\end_inset

).
\end_layout

\begin_layout Proof
For this new graph, the sum of weights is 
\begin_inset Formula $w\left(T\right)+w\left(e\right)-w\left(l\right)\underset{w\left(e\right)<w\left(l\right)}{\underbrace{<}}w\left(T\right)$
\end_inset

 in contradiction to 
\begin_inset Formula $T$
\end_inset

 being MST.
\end_layout

\begin_layout Proof
Thus, exists a red edge 
\begin_inset Formula $e'$
\end_inset

 that crosses the cut and 
\begin_inset Formula $w\left(e'\right)=w\left(e\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Note the 
\begin_inset Formula $e'\notin T$
\end_inset

 because it crosses the cut and 
\begin_inset Formula $e'\neq e$
\end_inset

 (the whole idea of the cut it separating the two connected components in
 
\begin_inset Formula $T\backslash\left\{ e\right\} $
\end_inset

 which means there are no edge connecting them).
\end_layout

\begin_layout Proof
So 
\begin_inset Formula $e'\in T'\backslash T$
\end_inset

 and 
\begin_inset Formula $w\left(\tree\right)=w\left(T\right)-w\left(e\right)+w\left(e'\right)\underset{t=w\left(e\right)=w\left(e'\right)}{\underbrace{=}}w\left(T\right)$
\end_inset

.
\end_layout

\begin_layout Proof
Since 
\begin_inset Formula $\tree$
\end_inset

 is built from two connected components with an edge connecting those two
 connected components.
 Also, 
\begin_inset Formula $T$
\end_inset

 has 
\begin_inset Formula $\left|V\right|-1$
\end_inset

 edges (because we removed an edge and added another one so we stayed with
 
\begin_inset Formula $\left|V\right|-1$
\end_inset

).
 
\end_layout

\begin_layout Proof
From those two claims, we get that 
\begin_inset Formula $\tree$
\end_inset

 is an MST.
\end_layout

\end_body
\end_document
